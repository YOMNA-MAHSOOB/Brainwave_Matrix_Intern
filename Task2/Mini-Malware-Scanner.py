import tkinter as tk
from tkinter import filedialog, messagebox
import os
import subprocess
import time
import psutil

# GUI 
BG_COLOR = "#ffe6f0"
BTN_COLOR = "#ffb3d9"
BTN_HOVER = "#ff99cc"
TEXT_COLOR = "#99004d"

root = tk.Tk()
root.title("Malware Scanner")
root.geometry("800x800")
root.resizable(False, False)
root.configure(bg=BG_COLOR)

file_path = tk.StringVar()

# SUSPICIOUS KEYWORDS 
suspicious_keywords = {
    "os.system": "High",
    "eval": "High",
    "subprocess": "High",
    "exec": "Medium",
    "socket": "Medium",
    "base64": "Low",
    "pickle": "Low"
}

# FUNCTIONS 
def browse_file():
    path = filedialog.askopenfilename()
    if path:
        file_path.set(path)
        scan_btn.config(state="normal")

def scan_file():
    report = "Scanned File:\n"
    result_box.config(state=tk.NORMAL)
    result_box.delete("1.0", tk.END)

    path = file_path.get()
    allowed_extensions = (".py", ".sh")

    if not path.endswith(allowed_extensions):
        result_box.insert(tk.END, "Only script files (.py, .sh) are allowed.\n")
        result_box.config(state=tk.DISABLED)
        return

    if not os.path.isfile(path):
        result_box.insert(tk.END, "Invalid file path.\n")
        result_box.config(state=tk.DISABLED)
        return

    try:
        with open(path, "r", errors="ignore") as f:
            content = f.read()

        found = [(word, level) for word, level in suspicious_keywords.items() if word in content]

        if found:
            result_box.insert(tk.END, "Suspicious keywords found:\n")
            for word, level in found:
                result_box.insert(tk.END, f" - {word}   [{level} Risk]\n")
                report += f" - {word}   [{level} Risk]\n"
        else:
            result_box.insert(tk.END, "No suspicious keywords found.\n")
            report += "No suspicious keywords found.\n"

    except Exception as e:
        result_box.insert(tk.END, f"Error reading file: {e}\n")

    result_box.config(state=tk.DISABLED)
    with open("scan_report.txt", "w") as rep_file:
        rep_file.write(report)

def open_report():
    if os.path.exists("scan_report.txt"):
        os.system("xdg-open scan_report.txt")
    else:
        messagebox.showerror("Error", "No report file found.")

def run_file():
    result_box.config(state=tk.NORMAL)
    result_box.delete("1.0", tk.END)

    path = file_path.get()
    if not os.path.isfile(path):
        result_box.insert(tk.END, "Invalid file path.\n")
        result_box.config(state=tk.DISABLED)
        return

    result_box.insert(tk.END, f"Running file: {path}\n")
    try:
        process = subprocess.Popen(["python3", path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        pid = process.pid
        result_box.insert(tk.END, f"Started process with PID: {pid}\n")

        time.sleep(2)
        proc = psutil.Process(pid)
        cpu = proc.cpu_percent(interval=1)
        mem = proc.memory_info().rss / (1024 * 1024)
        children = proc.children(recursive=True)

        result_box.insert(tk.END, f"CPU Usage: {cpu}%\n")
        result_box.insert(tk.END, f"Memory Usage: {mem:.2f} MB\n")

        if children:
            result_box.insert(tk.END, f"Spawned {len(children)} child process(es):\n")
            for child in children:
                try:
                    result_box.insert(tk.END, f" - PID {child.pid}: {child.name()}\n")
                except psutil.NoSuchProcess:
                    result_box.insert(tk.END, f" - PID {child.pid}: [Process ended quickly]\n")
        else:
            result_box.insert(tk.END, "No suspicious subprocesses detected.\n")

        # Save to report
        with open("scan_report.txt", "a") as f:
            f.write("\n--- Runtime Info ---\n")
            f.write(f"PID: {pid}\n")
            f.write(f"CPU Usage: {cpu}%\n")
            f.write(f"Memory Usage: {mem:.2f} MB\n")
            if children:
                f.write(f"Spawned {len(children)} subprocess(es):\n")
                for child in children:
                    f.write(f" - PID {child.pid}: {child.name()}\n")
            else:
                f.write("No suspicious subprocesses detected.\n")

    except Exception as e:
        result_box.insert(tk.END, f"Error running or monitoring file: {e}\n")

    result_box.config(state=tk.DISABLED)

def on_enter(e):
    e.widget['bg'] = BTN_HOVER

def on_leave(e):
    e.widget['bg'] = BTN_COLOR

# GUI ELEMENTS 
tk.Label(root, text=" Simple Malware Scanner ", font=("Arial", 16, "bold"),
         bg=BG_COLOR, fg=TEXT_COLOR).pack(pady=10)

browse_btn = tk.Button(root, text=" Browse File", command=browse_file,
                       bg=BTN_COLOR, fg=TEXT_COLOR, font=("Arial", 12, "bold"))
browse_btn.pack()
browse_btn.bind("<Enter>", on_enter)
browse_btn.bind("<Leave>", on_leave)

tk.Label(root, textvariable=file_path, wraplength=600,
         bg=BG_COLOR, fg=TEXT_COLOR, font=("Arial", 10)).pack(pady=10)

scan_btn = tk.Button(root, text=" Scan", state="disabled", command=scan_file,
                     bg=BTN_COLOR, fg=TEXT_COLOR, font=("Arial", 12, "bold"))
scan_btn.pack(pady=10)
scan_btn.bind("<Enter>", on_enter)
scan_btn.bind("<Leave>", on_leave)

run_button = tk.Button(root, text="Run file", command=run_file,
                       bg=BTN_COLOR, fg=TEXT_COLOR, font=("Arial", 10))
run_button.pack(pady=10)
run_button.bind("<Enter>", on_enter)
run_button.bind("<Leave>", on_leave)

generate_btn = tk.Button(root, text=" Open Report", command=open_report,
                         bg=BTN_COLOR, fg=TEXT_COLOR, font=("Arial", 12, "bold"))
generate_btn.pack(pady=10)
generate_btn.bind("<Enter>", on_enter)
generate_btn.bind("<Leave>", on_leave)

result_box = tk.Text(root, height=12, width=60, bg="#fff0f5",
                     fg=TEXT_COLOR, font=("Courier", 15))
result_box.pack(pady=10)
result_box.insert(tk.END, "Result will appear here...\n")
result_box.config(state=tk.DISABLED)

# START GUI 
root.mainloop()
